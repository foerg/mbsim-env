<?xml version="1.0" encoding="UTF-8" standalone="no" ?><DynamicSystemSolver xmlns="http://www.mbsim-env.de/MBSim" name="TS" xmlns:ombv="http://www.mbsim-env.de/OpenMBV" xmlns:pv="http://www.mbsim-env.de/MBXMLUtils" xmlns:xi="http://www.w3.org/2001/XInclude">
    <plotFeatureRecursive value="generalizedRelativePosition">True</plotFeatureRecursive>
    <plotFeatureRecursive value="generalizedRelativeVelocity">True</plotFeatureRecursive>
    <plotFeatureRecursive value="generalizedForce">True</plotFeatureRecursive>
    <plotFeatureRecursive value="generalizedPosition">True</plotFeatureRecursive>
    <plotFeatureRecursive value="generalizedVelocity">True</plotFeatureRecursive>
    <frames/>
    <contours/>
    <groups/>
    <objects>
        <RigidBody name="Box1">
            <frameOfReference ref="../Frame[I]"/>
            <frameForKinematics ref="Frame[C]"/>
            <mass>3</mass>
            <inertiaTensor>[[1,0,0],[0,1,0],[0,0,1]]</inertiaTensor>
            <timeDependentTranslation>
              <SymbolicFunction><definition arg1="t"># Test the access to the sympy object
                import mbxmlutils
                import numpy
                import sympy
                # some dummy tests
                x=mbxmlutils.tilde([1,2,3])
                x=mbxmlutils.tilde([[0,2,3],[-2,0,6],[-3,-6,0]])
                x=mbxmlutils.euler(0.1,0.2,0.3)
                x=mbxmlutils.euler([0.1,0.2,0.3])
                x=mbxmlutils.cardan(0.1,0.2,0.3)
                x=mbxmlutils.cardan([0.1,0.2,0.3])
                x=mbxmlutils.rotateAboutX(0.3)
                # some dummy numpy tests
                x=mbxmlutils.tilde(numpy.array([1,2,3]))
                x=mbxmlutils.tilde(numpy.array([[0,2,3],[-2,0,6],[-3,-6,0]]))
                x=mbxmlutils.euler(numpy.array([0.1,0.2,0.3]))
                x=mbxmlutils.cardan(numpy.array([0.1,0.2,0.3]))
                # some dummy sympy tests
                x=mbxmlutils.tilde(numpy.array(sympy.symbols('x:3')))
                x=mbxmlutils.tilde(numpy.array([sympy.symbols('Ta:3'),sympy.symbols('Tb:3'),sympy.symbols('Tc:3')]))
                x=mbxmlutils.euler(sympy.Symbol('x'),0.2,sympy.Symbol('z'))
                x=mbxmlutils.euler(numpy.array(sympy.symbols('x:3')))
                x=mbxmlutils.cardan(sympy.Symbol('x'),0.2,sympy.Symbol('z'))
                x=mbxmlutils.cardan(numpy.array(sympy.symbols('x:3')))
                x=mbxmlutils.rotateAboutX(sympy.Symbol('x'))

                half=2
                ret=sympy.zeros(3,1)
                ret[0]=sympy.sin(freq1*t + sympy.pi/half)
                ret[1]=v0y*t
                ret[2]=0
              </definition></SymbolicFunction>
            </timeDependentTranslation>
            <timeDependentRotation>
              <CompositeFunction>
                <outerFunction>
                  <RotationAboutFixedAxis>
                    <axisOfRotation>[0,0,1]</axisOfRotation>
                  </RotationAboutFixedAxis>
                </outerFunction>
                <innerFunction>
                  <SymbolicFunction><definition arg1="t">
                    5*sympy.sin(freq2*t)
                  </definition></SymbolicFunction>
                </innerFunction>
              </CompositeFunction>
            </timeDependentRotation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
                <ombv:Cube name="Box1">
                    <ombv:initialTranslation>[0,0,0]</ombv:initialTranslation>
                    <ombv:initialRotation>[0,0,0]</ombv:initialRotation>
                    <ombv:scaleFactor>1</ombv:scaleFactor>
                    <ombv:length>2</ombv:length>
                </ombv:Cube>
            </openMBVRigidBody>
        </RigidBody>
        <RigidBody name="Box1a">
            <frameOfReference ref="../Frame[I]"/>
            <frameForKinematics ref="Frame[C]"/>
            <mass>3</mass>
            <inertiaTensor>[[1,0,0],[0,1,0],[0,0,1]]</inertiaTensor>
            <timeDependentTranslation>
              <SymbolicFunction><definition arg1="t">
                ret=sympy.zeros(3,1); ret[0]=sympy.sin(freq1*t + pi/2); ret[1]=v0y*t; ret[2]=0
              </definition></SymbolicFunction>
            </timeDependentTranslation>
            <timeDependentRotation>
              <CompositeFunction>
                <outerFunction>
                  <RotationAboutAxesXY/>
                </outerFunction>
                <innerFunction>
                  <SymbolicFunction><definition arg1="t">
                    ret=sympy.zeros(2,1);ret[0]=t;ret[1]=2*t
                  </definition></SymbolicFunction>
                </innerFunction>
              </CompositeFunction>
            </timeDependentRotation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
                <ombv:Cube name="Box1a">
                    <ombv:initialTranslation>[0,0,0]</ombv:initialTranslation>
                    <ombv:initialRotation>[0,0,0]</ombv:initialRotation>
                    <ombv:scaleFactor>1</ombv:scaleFactor>
                    <ombv:length>2</ombv:length>
                </ombv:Cube>
            </openMBVRigidBody>
        </RigidBody>
        <RigidBody name="Box2">
            <frameOfReference ref="../Frame[I]"/>
            <frameForKinematics ref="Frame[C]"/>
            <mass>3</mass>
            <inertiaTensor>[[1,0,0],[0,1,0],[0,0,1]]</inertiaTensor>
            <stateDependentTranslation>
              <SymbolicFunction><definition arg1="q" arg1Dim="1">
                ret=sympy.zeros(3,1);ret[0]=5+sympy.cos(freq1*q[0]); ret[1]=sympy.sin(freq1*q[0]); ret[2]=0
              </definition></SymbolicFunction>
            </stateDependentTranslation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
                <ombv:Cube name="Box2">
                    <ombv:initialTranslation>[0,0,0]</ombv:initialTranslation>
                    <ombv:initialRotation>[0,0,0]</ombv:initialRotation>
                    <ombv:scaleFactor>1</ombv:scaleFactor>
                    <ombv:length>1</ombv:length>
                </ombv:Cube>
            </openMBVRigidBody>
        </RigidBody>
        <RigidBody name="Box3">
            <generalizedInitialVelocity>[0,1]</generalizedInitialVelocity>
            <frameOfReference ref="../Frame[I]"/>
            <frameForKinematics ref="Frame[C]"/>
            <mass>3</mass>
            <inertiaTensor>[[1,0,0],[0,1,0],[0,0,1]]</inertiaTensor>
            <generalTranslation>
              <SymbolicFunction><definition arg1="q" arg1Dim="2" arg2="t">
                <!-- SymbolicFunction does not distinguish between scalar, vector and matrix. Hence we can also write
                     <xmlMatrix>
                       <row><ele>x</ele></row>
                       <row><ele>x</ele></row>
                       <row><ele>x</ele></row>
                     </xmlMatrix>
                     here -->
                <pv:xmlVector>
                  <pv:ele>10+t+sympy.cos(freq1*q[0])</pv:ele>
                  <pv:ele>sympy.sin(freq1*q[0])</pv:ele>
                  <pv:ele>q[1]</pv:ele>
                </pv:xmlVector>
              </definition></SymbolicFunction>
            </generalTranslation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
                <ombv:Cube name="Box3">
                    <ombv:initialTranslation>[0,0,0]</ombv:initialTranslation>
                    <ombv:initialRotation>[0,0,0]</ombv:initialRotation>
                    <ombv:scaleFactor>1</ombv:scaleFactor>
                    <ombv:length>1</ombv:length>
                </ombv:Cube>
            </openMBVRigidBody>
        </RigidBody>
        <RigidBody name="Box4">
            <plotFeatureRecursive value="position">True</plotFeatureRecursive>
            <frameOfReference ref="../Frame[I]"/>
            <frameForKinematics ref="Frame[C]"/>
            <mass>3</mass>
            <inertiaTensor>[[1,0,0],[0,1,0],[0,0,1]]</inertiaTensor>
            <timeDependentTranslation>
              <SymbolicFunction><definition arg1="t">
                <pv:xmlVector>
                  <pv:ele>
                    <![CDATA[
                      sympy.Piecewise((1, t<2), (sympy.Max(2.5,t), t<4), (3, t<6), (0.5, t>9))
                    ]]>
                  </pv:ele>
                  <pv:ele>0</pv:ele>
                  <pv:ele>0</pv:ele>
                </pv:xmlVector>
              </definition></SymbolicFunction>
            </timeDependentTranslation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
                <ombv:Cube name="Box4">
                    <ombv:initialTranslation>[0,0,0]</ombv:initialTranslation>
                    <ombv:initialRotation>[0,0,0]</ombv:initialRotation>
                    <ombv:scaleFactor>1</ombv:scaleFactor>
                    <ombv:length>1</ombv:length>
                </ombv:Cube>
            </openMBVRigidBody>
        </RigidBody>
    </objects>
    <links/>
    <constraints/>
    <observers/>
    <environments>
        <MBSimEnvironment>
            <accelerationOfGravity>[0,-9.81,0]</accelerationOfGravity>
        </MBSimEnvironment>
    </environments>
</DynamicSystemSolver>