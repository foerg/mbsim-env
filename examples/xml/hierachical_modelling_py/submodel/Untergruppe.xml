<?xml version="1.0" encoding="UTF-8"?>
<Group name="Untergruppe" xmlns="http://www.mbsim-env.de/MBSim"
    xmlns:pv="http://www.mbsim-env.de/MBXMLUtils"
    xmlns:ombv="http://www.mbsim-env.de/OpenMBV">
  <frameOfReference ref="../Frame[Q]"/>
  <frames/>
  <contours/>
  <groups/>
  <objects>
    <RigidBody name="Box1">
      <generalizedInitialPosition>[l012[0] + h1/2 + 0.2]</generalizedInitialPosition>
      <generalizedInitialVelocity>[0]</generalizedInitialVelocity>
      <frameOfReference ref="../Frame[I]"/>
      <frameForKinematics ref="Frame[C]"/>
      <mass>
        <![CDATA[# If more than one python statement is given, the value for the
          # element is taken from the python variable named 'ret'.
          # Note that the characters '<', '>' and '&' are not allowed in XML text
          # elements. You must quote them with '&lt;', '&gt;' and '&amp;' or use
          # a CDATA section as used here.
     # comments may be indented arbitarily as well as empty lines
       
          # This code for the element 'mass' is just the same as '<mass>m1</mass>'.
          # Take care of correct python indentation!
          def myfunc(a):
            return 2*a
          if 1 and 2:
            x=9
          else:
            x=8
          ret=myfunc(m1/2)

          # check registerPath
          mbxmlutils.registerPath('dummy.dat')
          mbxmlutils.load('dummy.dat')
          
          # just a dummy statement to check for "inline" imports
          import os.path
          os.path.basename('abc/cde.txt')
        ]]>
      </mass>
      <inertiaTensor>[[1,0,0] , [0,1,0] , [0,0,1]]</inertiaTensor>
      <stateDependentTranslation>
        <LinearTranslation>
          <translationVectors>
            [[0], [mymodule.myPyFunction(1)], [0]]
          </translationVectors>
        </LinearTranslation>
      </stateDependentTranslation>
      <frames>
        <FixedRelativeFrame name="P1">
          <enableOpenMBV>
            <size>h1</size>
            <offset>1</offset>
          </enableOpenMBV>
          <relativePosition>[0,-h1/2,0]</relativePosition>
          <relativeOrientation>mbxmlutils.rotateAboutX(0)</relativeOrientation>
        </FixedRelativeFrame>
        <pv:Embed href="../frame.xml"/>
      </frames>
      <contours/>
      <openMBVRigidBody>
        <ombv:Cuboid name="dummy" outLine="m1==m2">
          <ombv:diffuseColor>[0,1,1]</ombv:diffuseColor>
          <ombv:transparency>0.2</ombv:transparency>
          <ombv:initialTranslation>[0,0,0]</ombv:initialTranslation>
          <ombv:initialRotation>[0,0,0]</ombv:initialRotation>
          <ombv:scaleFactor>1</ombv:scaleFactor>
          <ombv:length>[h1,h1,h1]</ombv:length>
        </ombv:Cuboid>
      </openMBVRigidBody>
    </RigidBody>
    <RigidBody name="Box2">
      <generalizedInitialPosition>[l012[0] + l012[1] + h1 + h2/2]</generalizedInitialPosition>
      <generalizedInitialVelocity>[0]</generalizedInitialVelocity>
      <frameOfReference ref="../Frame[I]"/>
      <frameForKinematics ref="Frame[C]"/>
      <mass>m2</mass>
      <inertiaTensor>[[1,0,0] , [0,1,0] , [0,0,1]]</inertiaTensor>
      <stateDependentTranslation>
        <TranslationAlongYAxis/>
      </stateDependentTranslation>
      <frames>
        <FixedRelativeFrame name="P1">
          <enableOpenMBV>
            <size>h2</size>
            <offset>1</offset>
          </enableOpenMBV>
          <relativePosition>[0,-h2/2,0]</relativePosition>
          <relativeOrientation>
            <pv:cardan>
              <pv:alpha>0</pv:alpha>
              <pv:beta>a=9;ret=0</pv:beta>
              <pv:gamma>0</pv:gamma>
            </pv:cardan>
          </relativeOrientation>
        </FixedRelativeFrame>
      </frames>
      <contours/>
      <openMBVRigidBody>
        <IvBody name="dummy" xmlns="http://www.mbsim-env.de/OpenMBV">
          <diffuseColor>[0.3333,1,0.3333]</diffuseColor>
          <initialTranslation>[0,0,0]</initialTranslation>
          <initialRotation>[0,0,0]</initialRotation>
          <scaleFactor>1.5</scaleFactor>
          <ivFileName>'../'+ivdir+'/hat.iv'</ivFileName>
          <creaseEdges unit="degree">30</creaseEdges>
        </IvBody>
      </openMBVRigidBody>
    </RigidBody>
    <RigidBody name="Box3">
      <?MBSIMGUI_CONTEXT_ACTION name="Open plot dialog"
        import matplotlib.pyplot
        fig=matplotlib.pyplot.figure("Box3 x").show()?>
      <frameOfReference ref="../Frame[I]"/>
      <frameForKinematics ref="Frame[C]"/>
      <mass>m2</mass>
      <inertiaTensor>[[1,0,0] , [0,1,0] , [0,0,1]]</inertiaTensor>
      <timeDependentTranslation>
        <VectorValuedFunction>
          <components>
            <PiecewisePolynomFunction>
              <xy>
                ret=numpy.array([
                  [0,(2*numHG-1)*0],
                  [1,(2*numHG-1)*1],
                  [2,(2*numHG-1)*2],
                  [3,(2*numHG-1)*1],
                  [4,(2*numHG-1)*0],
                ])
                if mbxmlutils.Qt.isGUI():
                  try:
                    import matplotlib.pyplot
                  except ModuleNotFoundError:
                    pass
                  else:
                    import numpy
                    import mbsim
                    import PySide2.QtCore
                    fig=matplotlib.pyplot.figure("Box3 x")#mfmf getPath without counterName resolution
                    class SkipCloseEventFilter(PySide2.QtCore.QObject):
                      def eventFilter(self, obj, event):
                        # skip close event -> just hide the windows (process all other eventy)
                        return event.type()==PySide2.QtCore.QEvent.Close
                    skipCloseEventFilter=SkipCloseEventFilter()
                    fig.canvas.manager.window.installEventFilter(skipCloseEventFilter)
                    pp=mbsim.PiecewisePolynomFunction_d()
                    pp.setxy(ret)
                    pp.init(mbsim.Element.preInit)
                    x=numpy.linspace(ret[0,0], ret[-1,0], 1000)
                    y=numpy.vectorize(lambda xx: pp(xx))(x)
                    colors=matplotlib.rcParams['axes.prop_cycle'].by_key()['color']
                    color=colors[numHG%len(colors)]
                    matplotlib.pyplot.plot(ret[:,0], ret[:,1], label="Position x - Points", marker="x", color=color, linestyle=":")
                    matplotlib.pyplot.plot(x, y, label="Position x", color=color, linewidth=2)
                    matplotlib.pyplot.legend()
                    matplotlib.pyplot.draw()
              </xy>
            </PiecewisePolynomFunction>
            <ConstantFunction>
              <a0>0</a0>
            </ConstantFunction>
            <ConstantFunction>
              <a0>0</a0>
            </ConstantFunction>
          </components>
        </VectorValuedFunction>
      </timeDependentTranslation>
      <frames>
        <FixedRelativeFrame name="P1">
          <enableOpenMBV>
            <size>h2</size>
            <offset>1</offset>
          </enableOpenMBV>
          <relativePosition>[0,-h2/2,0]</relativePosition>
          <relativeOrientation>
            <pv:cardan>
              <pv:alpha>0</pv:alpha>
              <pv:beta>a=9;ret=0</pv:beta>
              <pv:gamma>0</pv:gamma>
            </pv:cardan>
          </relativeOrientation>
        </FixedRelativeFrame>
      </frames>
      <contours/>
      <openMBVRigidBody>
        <IvBody name="dummy" xmlns="http://www.mbsim-env.de/OpenMBV">
          <diffuseColor>[0.3333,1,0.3333]</diffuseColor>
          <initialTranslation>[0,0,0]</initialTranslation>
          <initialRotation>[0,0,0]</initialRotation>
          <scaleFactor>1.5</scaleFactor>
          <ivFileName>'../'+ivdir+'/hat.iv'</ivFileName>
          <creaseEdges unit="degree">30</creaseEdges>
        </IvBody>
      </openMBVRigidBody>
    </RigidBody>
  </objects>
  <links>
    <SpringDamper name="Feder1">
      <connect ref1="../Object[Box1]/Frame[P1]" ref2="../Frame[I]"/>
      <forceFunction>
        <LinearSpringDamperForce>
          <stiffnessCoefficient>c1</stiffnessCoefficient>
          <dampingCoefficient>d1</dampingCoefficient>
        </LinearSpringDamperForce>
      </forceFunction>
      <unloadedLength>l012[0]</unloadedLength>
    </SpringDamper>
    <SpringDamper name="Feder2">
      <connect ref1="../Object[Box1]/Frame[P2]" ref2="../Object[Box2]/Frame[P1]"/>
      <forceFunction>
        <LinearSpringDamperForce>
          <stiffnessCoefficient>c2</stiffnessCoefficient>
          <dampingCoefficient>d2</dampingCoefficient>
        </LinearSpringDamperForce>
      </forceFunction>
      <unloadedLength>l012[1]</unloadedLength>
      <enableOpenMBV>
          <colorRepresentation>"absoluteForce"</colorRepresentation>
          <numberOfCoils>
            mbxmlutils.staticData["saveSomeData"]=0.01
            ret=5
          </numberOfCoils>
          <springRadius>0.1</springRadius>
          <crossSectionRadius>
            ret=mbxmlutils.staticData["saveSomeData"] # access the staticData from above
          </crossSectionRadius>
      </enableOpenMBV>
    </SpringDamper>
  </links>
  <constraints/>
  <observers>
    <MechanicalLinkObserver name="Observer">
      <mechanicalLink ref="../Link[Feder1]"/>
      <enableOpenMBVForce>
        <scaleLength>0.005</scaleLength>
      </enableOpenMBVForce>
    </MechanicalLinkObserver>
  </observers>
</Group>
